#! /usr/bin/env python

import gzip
import argparse
import signal
import sys

def openFile(fileName):
    if fileName == "-":
        return sys.stdin
    if fileName.endswith(".gz"):
        return gzip.open(fileName, "rt")
    return open(fileName)

def segmentsFromLines(lines):
    for line in lines:
        stripped = line.strip()
        if not stripped:
            continue
        if stripped.startswith("SW") or stripped.startswith("score"):
            continue
        fields = stripped.split()
        qrySeq = fields[4]
        qryBeg = int(fields[5])
        qryEnd = int(fields[6])
        isRev = fields[8] == "C"
        rptFam = fields[10]
        rptBeg = int(fields[13] if isRev else fields[11])
        rptEnd = int(fields[12])
        pos = qrySeq, qryBeg, qryEnd
        data = isRev, rptFam, rptBeg, rptEnd
        yield pos, data

def groupsFromLines(lines):
    title = ""
    for line in lines:
        if line.startswith("# PART"):  # alignment starts
            yield title, textList, segList
            break
        stripped = line.rstrip()
        if not stripped:
            continue
        fields = stripped.split()
        if fields[1].startswith("group"):
            if title:
                yield title, textList, segList
            title = fields[1]
            textList = []
            segList = []
        elif fields[1].endswith("+") or fields[1].endswith("-"):
            textList.append(stripped)
            segList.append(fields[2:])
        else:
            textList.append(stripped)
            segList[-1] += fields[1:]

def filterByGroups(inFile, outFile, segs, insert, gap):
    passedGroup = []
    for group, textList, segList in groupsFromLines(inFile):
        segNums = list(map(lambda x: len(x), segList))
        if sum(segNums) / len(segNums) > 2:
            # Do nothing if there're more than 2 segments in the rearranegment.
            continue
        isUpstream = None
        isInsRev = None
        refName = ""
        refBeg = sys.maxsize
        refEnd = 0
        for readsAlns in segList:
            if isUpstream is None:
                isUpstream = readsAlns[0].startswith(insert)
            if isUpstream:
                refSeq = readsAlns[1]
                insSeq = readsAlns[0]
            else:
                refSeq = readsAlns[0]
                insSeq = readsAlns[1]
            
            if isInsRev is None:
                isInsRev = ">" in insSeq
            
            refData = refSeq.split(":")
            if not refName:
                refName = refData[0]
            refPos = refData[1].split("<")
            refBeg = min(int(refPos[0]), refBeg)
            refEnd = max(int(refPos[1]), refEnd)

        remover = False
        for key in segs:
            if remover:
                break
            qryName, qryBeg, qryEnd = key
            if qryName == refName:
                if isUpstream:
                    posRemover = qryBeg - gap <= refBeg and refBeg <= qryEnd + gap
                else:
                    posRemover = qryBeg - gap <= refEnd and refEnd <= qryEnd + gap

                if posRemover:
                    isRev, rptFam, rptBeg, rptEnd = segs[key]
                    remover = isRev == isInsRev
        
        if not remover:
            passedGroup.append(group)
            print("#", group, sep=" ", file=outFile)
            print(*textList, sep="\n", file=outFile)
            print("\n", file=outFile)
    # end of iteration in groupsFromLines
    
    print("%d groups passed the filter." % (len(passedGroup)))
    line = inFile.readline()
    if passedGroup[0].startswith("group1-"):
        print("#", "PART", passedGroup[0], sep=" ", file=outFile)
        print("\n", file=outFile)
        while not line[0] == "#":
            print(line, end="", file=outFile)
            line = inFile.readline()
    else:
        while not line[0] == "#":
            line = inFile.readline()
    
    outputFlag = False
    while line:
        if line[0] == "#":
            group = line.split()[2]
            outputFlag = group in passedGroup

        if outputFlag:
            print(line, end="", file=outFile)

        line = inFile.readline()

def main(args):
    segs = dict(segmentsFromLines(openFile(args.seg)))
    inFile = openFile(args.input)
    outFile = open(args.output + ".maf", "w+")

    # Conserve the first line of infile.
    print(inFile.readline(), file=outFile)

    if args.a:
        pass
    else:
        filterByGroups(inFile, outFile, segs, args.insert, args.gap)

    inFile.close()
    outFile.close()


if __name__ == "__main__":
    signal.signal(signal.SIGPIPE, signal.SIG_DFL)  # avoid silly error message
    parser = argparse.ArgumentParser()
    parser.add_argument("--seg", help="segment file", required=True)
    parser.add_argument("--insert", help="insertion segment name", required=True)
    parser.add_argument("--gap", help="(default 0) set a gap for both ends", default=0, type=int)
    parser.add_argument("-a", help="filter by alignment", action="store_true")
    parser.add_argument("-i", "--input", help="input maf file", required=True)
    parser.add_argument("-o", "--output", help="output prefix", required=True)
    args = parser.parse_args()
    main(args)
    


    





