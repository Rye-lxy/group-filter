#! /usr/bin/env python

import gzip
import argparse
import signal
import sys
import re


class Segment:
    def __init__(self, name, start, end, isRev):
        self.name = name
        self.start = int(start)
        self.end = int(end)
        self.isRev = isRev
        self.length = self.end - self.start + 1

    def __str__(self):
        if self.isRev:
            return "{0}:{2}>{1}".format(self.name, self.start, self.end)
        else:
            return "{0}:{1}<{2}".format(self.name, self.start, self.end)

    @classmethod
    def generateFromStr(self, segStr):
        # Initialize from the segment string
        # e.g. "chr1:11<100"
        splited_1 = segStr.split(":")
        name = splited_1[0]
        region = splited_1[1]
        if "<" in region:
            splited_2 = region.split("<")
            start = splited_2[0]
            end = splited_2[1]
            isRev = False
        else:
            splited_2 = region.split(">")
            start = splited_2[1]
            end = splited_2[0]
            isRev = True
        
        return self(name, start, end, isRev)
    
    def cat(self, other, maxGap = 0.2):
        # Concatenate 2 close or overlapped segments.
        # Notice: it will return the origin object 
        # if one segment covers another completely.
        if not isinstance(other, Segment):
            raise AttributeError("Connot concatenate!")
        
        if self.isRev != other.isRev or self.name != other.name:
            # print("{0} and {1} cannot be concatenated.".format(self, other))
            return self
        gap = (self.length + other.length) * maxGap if maxGap < 1 else maxGap
        if other.start < self.start:
            if other.end > self.end:
                return other
            elif self.start - other.end < gap:
                return Segment(self.name, other.start, self.end, self.isRev)
            else:
                return self
        elif other.end < self.end:
            return self
        elif other.start - self.end < gap:
                return Segment(self.name, self.start, other.end, self.isRev)
        else:
            return self
        
    def isCatableWith(self, other, maxGap = 0.2):
        # Check if 2 segments can be concatenated by cat function.
        if not isinstance(other, Segment):
            return False
        if self.isRev != other.isRev:
            return False
        gap = (self.length + other.length) * maxGap if maxGap < 1 else maxGap
        if other.start < self.start:
            return self.start - other.end < gap
        else:
            return other.start - self.end < gap
        
    def isWithin(self, other):
        # Check if one segment (self) is totally covered by another.
        if not isinstance(other, Segment):
            raise AttributeError("Incorrect attribute")
        return self.name == other.name and self.isRev == other.isRev and \
            self.start >= other.start and self.end <= other.end
    
    def reverse(self):
        # Reverse the strand
        self.isRev = not self.isRev
        return self


def openFile(fileName):
    if fileName == "-":
        return sys.stdin
    if fileName.endswith(".gz"):
        return gzip.open(fileName, "rt")
    return open(fileName)

def segmentsFromLines(lines):
    for line in lines:
        stripped = line.strip()
        if not stripped:
            continue
        if stripped.startswith("SW") or stripped.startswith("score"):
            continue
        fields = stripped.split()
        qryName = fields[4]
        qryBeg = int(fields[5])
        qryEnd = int(fields[6])
        isRev = fields[8] == "C"
        rptFam = fields[10]
        rptBeg = int(fields[13] if isRev else fields[11])
        rptEnd = int(fields[12])
        seg = Segment(qryName, qryBeg, qryEnd, isRev)
        data = rptFam, rptBeg, rptEnd
        yield seg, data

def groupsFromLines(lines):
    title = ""
    for line in lines:
        if line.startswith("# PART"):  # group info end
            yield title, textList, segList
            break
        stripped = line.rstrip()
        fields = stripped.split()
        if len(fields) < 2:
            continue
        if fields[1].startswith("group"):
            if title:
                yield title, textList, segList
            title = fields[1]
            textList = []
            segList = []
        elif fields[1].endswith("+") or fields[1].endswith("-"):
            textList.append(stripped)
            segList.append(fields[2:])
        elif re.match("\w+:\d+[<>]\d+", fields[1]):
            textList.append(stripped)
            segList[-1] += fields[1:]

def filterByGroups(inFile, outFile, segs, insert):
    passedGroup = []
    for group, textList, segList in groupsFromLines(inFile):
        readSegs = list(map(Segment.generateFromStr, segList[0]))
        remover = False
        if len(readSegs) == 2:
            isUpstream = readSegs[0].name == insert
            if isUpstream:
                ref = readSegs[1]
                ins = readSegs[0]
            else:
                ref = readSegs[0]
                ins = readSegs[1]
        elif len(readSegs) > 2:
            # ensure the insersion part is the first element 
            if readSegs[0].name == insert:
                isUpstream = True
            elif readSegs[-1].name == insert:
                isUpstream = False
                readSegs = [x.reverse() for x in reversed(readSegs)]
            else:
                remover = True

            catList = []
            insLen = 0
            longestRef = 0
            for readSeg in readSegs:
                if readSeg.name == insert:
                    catList.append(readSeg)
                    insLen += readSeg.length
                    continue
                catable = False
                for i in range(len(catList)):
                    catSeg = catList[i]
                    if readSeg.isCatableWith(catSeg):
                        catList[i] = catSeg.cat(readSeg)
                        catable = True
                        longestRef = max(longestRef, catList[i].length)
                        break
                if not catable:
                    catList.append(readSeg)
                    longestRef = max(longestRef, readSeg.length)
            if longestRef < insLen:
                remover = True

            for catSeg in catList:
                if catSeg.name == insert:
                    ins = catSeg
                elif (longestRef - catSeg.length) / catSeg.length < 0.5:
                    ref = catSeg
                    break
            
            if ref.isRev:
                ref.reverse()
                ins.reverse()
                isUpstream = not isUpstream
        # end of if-else for segment number 

        for seg in segs:
            if remover:
                break
            if seg.name == ref.name:
                if isUpstream:
                    posRemover = seg.start <= ref.start and ref.start <= seg.end
                else:
                    posRemover = seg.start <= ref.end and ref.end <= seg.end


                if posRemover:
                    remover = seg.isRev == ins.isRev
        
        if not remover:
            passedGroup.append(group)
            print("#", group, sep=" ", file=outFile)
            print(*textList, sep="\n", file=outFile)
            print("\n", file=outFile)
    # end of iteration in groupsFromLines
    
    print("%d groups passed the filter." % (len(passedGroup)))
    line = inFile.readline()
    if passedGroup[0].startswith("group1-"):
        print("#", "PART", passedGroup[0], sep=" ", file=outFile)
        print("\n", file=outFile)
        while not line[0] == "#":
            print(line, end="", file=outFile)
            line = inFile.readline()
    else:
        while not line[0] == "#":
            line = inFile.readline()
    
    outputFlag = False
    while line:
        if line[0] == "#":
            group = line.split()[2]
            outputFlag = group in passedGroup

        if outputFlag:
            print(line, end="", file=outFile)

        line = inFile.readline()

def main(args):
    segs = dict(segmentsFromLines(openFile(args.seg)))
    inFile = openFile(args.input)
    outFile = open(args.output + ".maf", "w+")

    if args.gap:
        pass
    else:
        filterByGroups(inFile, outFile, segs, args.insert)

    inFile.close()
    outFile.close()


if __name__ == "__main__":
    signal.signal(signal.SIGPIPE, signal.SIG_DFL)  # avoid silly error message
    parser = argparse.ArgumentParser()
    parser.add_argument("--seg", help="segment file", required=True)
    parser.add_argument("--insert", help="insertion segment name", required=True)
    parser.add_argument("--gap", help="considering gaps in read alignments", action="store_true")
    parser.add_argument("-i", "--input", help="input maf file", required=True)
    parser.add_argument("-o", "--output", help="output prefix", required=True)
    args = parser.parse_args()
    main(args)
    


    





